
==392078== Memcheck, a memory error detector
==392078== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392078== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392078== Command: ../push_swap_working/push_swap 1 2 3 4 5
==392078== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392078== 
==392078== HEAP SUMMARY:
==392078==     in use at exit: 0 bytes in 0 blocks
==392078==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392078== 
==392078== All heap blocks were freed -- no leaks are possible
==392078== 
==392078== For lists of detected and suppressed errors, rerun with: -s
==392078== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392079== Memcheck, a memory error detector
==392079== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392079== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392079== Command: ../push_swap_working/push_swap 1 2 3 5 4
==392079== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392079== 
==392079== HEAP SUMMARY:
==392079==     in use at exit: 0 bytes in 0 blocks
==392079==   total heap usage: 415 allocs, 415 frees, 4,374 bytes allocated
==392079== 
==392079== All heap blocks were freed -- no leaks are possible
==392079== 
==392079== For lists of detected and suppressed errors, rerun with: -s
==392079== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392080== Memcheck, a memory error detector
==392080== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392080== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392080== Command: ../push_swap_working/push_swap 1 2 4 3 5
==392080== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392080== 
==392080== HEAP SUMMARY:
==392080==     in use at exit: 0 bytes in 0 blocks
==392080==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392080== 
==392080== All heap blocks were freed -- no leaks are possible
==392080== 
==392080== For lists of detected and suppressed errors, rerun with: -s
==392080== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392081== Memcheck, a memory error detector
==392081== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392081== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392081== Command: ../push_swap_working/push_swap 1 2 4 5 3
==392081== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392081== 
==392081== HEAP SUMMARY:
==392081==     in use at exit: 0 bytes in 0 blocks
==392081==   total heap usage: 413 allocs, 413 frees, 4,355 bytes allocated
==392081== 
==392081== All heap blocks were freed -- no leaks are possible
==392081== 
==392081== For lists of detected and suppressed errors, rerun with: -s
==392081== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392082== Memcheck, a memory error detector
==392082== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392082== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392082== Command: ../push_swap_working/push_swap 1 2 5 3 4
==392082== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392082== 
==392082== HEAP SUMMARY:
==392082==     in use at exit: 0 bytes in 0 blocks
==392082==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392082== 
==392082== All heap blocks were freed -- no leaks are possible
==392082== 
==392082== For lists of detected and suppressed errors, rerun with: -s
==392082== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392083== Memcheck, a memory error detector
==392083== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392083== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392083== Command: ../push_swap_working/push_swap 1 2 5 4 3
==392083== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392083== 
==392083== HEAP SUMMARY:
==392083==     in use at exit: 0 bytes in 0 blocks
==392083==   total heap usage: 415 allocs, 415 frees, 4,375 bytes allocated
==392083== 
==392083== All heap blocks were freed -- no leaks are possible
==392083== 
==392083== For lists of detected and suppressed errors, rerun with: -s
==392083== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392086== Memcheck, a memory error detector
==392086== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392086== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392086== Command: ../push_swap_working/push_swap 1 3 2 4 5
==392086== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392086== 
==392086== HEAP SUMMARY:
==392086==     in use at exit: 0 bytes in 0 blocks
==392086==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392086== 
==392086== All heap blocks were freed -- no leaks are possible
==392086== 
==392086== For lists of detected and suppressed errors, rerun with: -s
==392086== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392087== Memcheck, a memory error detector
==392087== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392087== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392087== Command: ../push_swap_working/push_swap 1 3 2 5 4
==392087== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392087== 
==392087== HEAP SUMMARY:
==392087==     in use at exit: 0 bytes in 0 blocks
==392087==   total heap usage: 415 allocs, 415 frees, 4,374 bytes allocated
==392087== 
==392087== All heap blocks were freed -- no leaks are possible
==392087== 
==392087== For lists of detected and suppressed errors, rerun with: -s
==392087== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392090== Memcheck, a memory error detector
==392090== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392090== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392090== Command: ../push_swap_working/push_swap 1 3 4 2 5
==392090== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392090== 
==392090== HEAP SUMMARY:
==392090==     in use at exit: 0 bytes in 0 blocks
==392090==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392090== 
==392090== All heap blocks were freed -- no leaks are possible
==392090== 
==392090== For lists of detected and suppressed errors, rerun with: -s
==392090== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392092== Memcheck, a memory error detector
==392092== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392092== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392092== Command: ../push_swap_working/push_swap 1 3 4 5 2
==392092== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392092== 
==392092== HEAP SUMMARY:
==392092==     in use at exit: 0 bytes in 0 blocks
==392092==   total heap usage: 413 allocs, 413 frees, 4,355 bytes allocated
==392092== 
==392092== All heap blocks were freed -- no leaks are possible
==392092== 
==392092== For lists of detected and suppressed errors, rerun with: -s
==392092== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392094== Memcheck, a memory error detector
==392094== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392094== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392094== Command: ../push_swap_working/push_swap 1 3 5 2 4
==392094== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392094== 
==392094== HEAP SUMMARY:
==392094==     in use at exit: 0 bytes in 0 blocks
==392094==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392094== 
==392094== All heap blocks were freed -- no leaks are possible
==392094== 
==392094== For lists of detected and suppressed errors, rerun with: -s
==392094== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392096== Memcheck, a memory error detector
==392096== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392096== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392096== Command: ../push_swap_working/push_swap 1 3 5 4 2
==392096== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392096== 
==392096== HEAP SUMMARY:
==392096==     in use at exit: 0 bytes in 0 blocks
==392096==   total heap usage: 415 allocs, 415 frees, 4,375 bytes allocated
==392096== 
==392096== All heap blocks were freed -- no leaks are possible
==392096== 
==392096== For lists of detected and suppressed errors, rerun with: -s
==392096== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392098== Memcheck, a memory error detector
==392098== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392098== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392098== Command: ../push_swap_working/push_swap 1 4 2 3 5
==392098== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392098== 
==392098== HEAP SUMMARY:
==392098==     in use at exit: 0 bytes in 0 blocks
==392098==   total heap usage: 415 allocs, 415 frees, 4,358 bytes allocated
==392098== 
==392098== All heap blocks were freed -- no leaks are possible
==392098== 
==392098== For lists of detected and suppressed errors, rerun with: -s
==392098== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392100== Memcheck, a memory error detector
==392100== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392100== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392100== Command: ../push_swap_working/push_swap 1 4 2 5 3
==392100== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392100== 
==392100== HEAP SUMMARY:
==392100==     in use at exit: 0 bytes in 0 blocks
==392100==   total heap usage: 419 allocs, 419 frees, 4,398 bytes allocated
==392100== 
==392100== All heap blocks were freed -- no leaks are possible
==392100== 
==392100== For lists of detected and suppressed errors, rerun with: -s
==392100== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392102== Memcheck, a memory error detector
==392102== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392102== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392102== Command: ../push_swap_working/push_swap 1 4 3 2 5
==392102== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392102== 
==392102== HEAP SUMMARY:
==392102==     in use at exit: 0 bytes in 0 blocks
==392102==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392102== 
==392102== All heap blocks were freed -- no leaks are possible
==392102== 
==392102== For lists of detected and suppressed errors, rerun with: -s
==392102== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392104== Memcheck, a memory error detector
==392104== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392104== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392104== Command: ../push_swap_working/push_swap 1 4 3 5 2
==392104== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392104== 
==392104== HEAP SUMMARY:
==392104==     in use at exit: 0 bytes in 0 blocks
==392104==   total heap usage: 417 allocs, 417 frees, 4,379 bytes allocated
==392104== 
==392104== All heap blocks were freed -- no leaks are possible
==392104== 
==392104== For lists of detected and suppressed errors, rerun with: -s
==392104== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392107== Memcheck, a memory error detector
==392107== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392107== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392107== Command: ../push_swap_working/push_swap 1 4 5 2 3
==392107== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392107== 
==392107== HEAP SUMMARY:
==392107==     in use at exit: 0 bytes in 0 blocks
==392107==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392107== 
==392107== All heap blocks were freed -- no leaks are possible
==392107== 
==392107== For lists of detected and suppressed errors, rerun with: -s
==392107== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392109== Memcheck, a memory error detector
==392109== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392109== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392109== Command: ../push_swap_working/push_swap 1 4 5 3 2
==392109== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392109== 
==392109== HEAP SUMMARY:
==392109==     in use at exit: 0 bytes in 0 blocks
==392109==   total heap usage: 419 allocs, 419 frees, 4,399 bytes allocated
==392109== 
==392109== All heap blocks were freed -- no leaks are possible
==392109== 
==392109== For lists of detected and suppressed errors, rerun with: -s
==392109== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392111== Memcheck, a memory error detector
==392111== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392111== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392111== Command: ../push_swap_working/push_swap 1 5 2 3 4
==392111== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392111== 
==392111== HEAP SUMMARY:
==392111==     in use at exit: 0 bytes in 0 blocks
==392111==   total heap usage: 397 allocs, 397 frees, 4,134 bytes allocated
==392111== 
==392111== All heap blocks were freed -- no leaks are possible
==392111== 
==392111== For lists of detected and suppressed errors, rerun with: -s
==392111== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392113== Memcheck, a memory error detector
==392113== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392113== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392113== Command: ../push_swap_working/push_swap 1 5 2 4 3
==392113== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392113== 
==392113== HEAP SUMMARY:
==392113==     in use at exit: 0 bytes in 0 blocks
==392113==   total heap usage: 401 allocs, 401 frees, 4,174 bytes allocated
==392113== 
==392113== All heap blocks were freed -- no leaks are possible
==392113== 
==392113== For lists of detected and suppressed errors, rerun with: -s
==392113== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392115== Memcheck, a memory error detector
==392115== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392115== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392115== Command: ../push_swap_working/push_swap 1 5 3 2 4
==392115== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392115== 
==392115== HEAP SUMMARY:
==392115==     in use at exit: 0 bytes in 0 blocks
==392115==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392115== 
==392115== All heap blocks were freed -- no leaks are possible
==392115== 
==392115== For lists of detected and suppressed errors, rerun with: -s
==392115== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392117== Memcheck, a memory error detector
==392117== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392117== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392117== Command: ../push_swap_working/push_swap 1 5 3 4 2
==392117== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392117== 
==392117== HEAP SUMMARY:
==392117==     in use at exit: 0 bytes in 0 blocks
==392117==   total heap usage: 399 allocs, 399 frees, 4,155 bytes allocated
==392117== 
==392117== All heap blocks were freed -- no leaks are possible
==392117== 
==392117== For lists of detected and suppressed errors, rerun with: -s
==392117== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392119== Memcheck, a memory error detector
==392119== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392119== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392119== Command: ../push_swap_working/push_swap 1 5 4 2 3
==392119== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392119== 
==392119== HEAP SUMMARY:
==392119==     in use at exit: 0 bytes in 0 blocks
==392119==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392119== 
==392119== All heap blocks were freed -- no leaks are possible
==392119== 
==392119== For lists of detected and suppressed errors, rerun with: -s
==392119== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392121== Memcheck, a memory error detector
==392121== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392121== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392121== Command: ../push_swap_working/push_swap 1 5 4 3 2
==392121== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392121== 
==392121== HEAP SUMMARY:
==392121==     in use at exit: 0 bytes in 0 blocks
==392121==   total heap usage: 401 allocs, 401 frees, 4,175 bytes allocated
==392121== 
==392121== All heap blocks were freed -- no leaks are possible
==392121== 
==392121== For lists of detected and suppressed errors, rerun with: -s
==392121== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392123== Memcheck, a memory error detector
==392123== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392123== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392123== Command: ../push_swap_working/push_swap 2 1 3 4 5
==392123== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392123== 
==392123== HEAP SUMMARY:
==392123==     in use at exit: 0 bytes in 0 blocks
==392123==   total heap usage: 409 allocs, 409 frees, 4,314 bytes allocated
==392123== 
==392123== All heap blocks were freed -- no leaks are possible
==392123== 
==392123== For lists of detected and suppressed errors, rerun with: -s
==392123== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392129== Memcheck, a memory error detector
==392129== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392129== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392129== Command: ../push_swap_working/push_swap 2 1 3 5 4
==392129== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392129== 
==392129== HEAP SUMMARY:
==392129==     in use at exit: 0 bytes in 0 blocks
==392129==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392129== 
==392129== All heap blocks were freed -- no leaks are possible
==392129== 
==392129== For lists of detected and suppressed errors, rerun with: -s
==392129== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392131== Memcheck, a memory error detector
==392131== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392131== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392131== Command: ../push_swap_working/push_swap 2 1 4 3 5
==392131== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392131== 
==392131== HEAP SUMMARY:
==392131==     in use at exit: 0 bytes in 0 blocks
==392131==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392131== 
==392131== All heap blocks were freed -- no leaks are possible
==392131== 
==392131== For lists of detected and suppressed errors, rerun with: -s
==392131== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392133== Memcheck, a memory error detector
==392133== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392133== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392133== Command: ../push_swap_working/push_swap 2 1 4 5 3
==392133== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392133== 
==392133== HEAP SUMMARY:
==392133==     in use at exit: 0 bytes in 0 blocks
==392133==   total heap usage: 411 allocs, 411 frees, 4,335 bytes allocated
==392133== 
==392133== All heap blocks were freed -- no leaks are possible
==392133== 
==392133== For lists of detected and suppressed errors, rerun with: -s
==392133== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392135== Memcheck, a memory error detector
==392135== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392135== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392135== Command: ../push_swap_working/push_swap 2 1 5 3 4
==392135== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392135== 
==392135== HEAP SUMMARY:
==392135==     in use at exit: 0 bytes in 0 blocks
==392135==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392135== 
==392135== All heap blocks were freed -- no leaks are possible
==392135== 
==392135== For lists of detected and suppressed errors, rerun with: -s
==392135== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392137== Memcheck, a memory error detector
==392137== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392137== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392137== Command: ../push_swap_working/push_swap 2 1 5 4 3
==392137== 
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 3=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 2=
=Biggest in B 2=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=Biggest in B 2=
=Smallest in B 2=
=------------------=
dest_len is 4
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392137== 
==392137== HEAP SUMMARY:
==392137==     in use at exit: 0 bytes in 0 blocks
==392137==   total heap usage: 413 allocs, 413 frees, 4,355 bytes allocated
==392137== 
==392137== All heap blocks were freed -- no leaks are possible
==392137== 
==392137== For lists of detected and suppressed errors, rerun with: -s
==392137== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392139== Memcheck, a memory error detector
==392139== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392139== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392139== Command: ../push_swap_working/push_swap 2 3 1 4 5
==392139== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392139== 
==392139== HEAP SUMMARY:
==392139==     in use at exit: 0 bytes in 0 blocks
==392139==   total heap usage: 427 allocs, 427 frees, 4,554 bytes allocated
==392139== 
==392139== All heap blocks were freed -- no leaks are possible
==392139== 
==392139== For lists of detected and suppressed errors, rerun with: -s
==392139== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392141== Memcheck, a memory error detector
==392141== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392141== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392141== Command: ../push_swap_working/push_swap 2 3 1 5 4
==392141== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392141== 
==392141== HEAP SUMMARY:
==392141==     in use at exit: 0 bytes in 0 blocks
==392141==   total heap usage: 431 allocs, 431 frees, 4,594 bytes allocated
==392141== 
==392141== All heap blocks were freed -- no leaks are possible
==392141== 
==392141== For lists of detected and suppressed errors, rerun with: -s
==392141== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392143== Memcheck, a memory error detector
==392143== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392143== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392143== Command: ../push_swap_working/push_swap 2 3 4 1 5
==392143== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392143== 
==392143== HEAP SUMMARY:
==392143==     in use at exit: 0 bytes in 0 blocks
==392143==   total heap usage: 429 allocs, 429 frees, 4,574 bytes allocated
==392143== 
==392143== All heap blocks were freed -- no leaks are possible
==392143== 
==392143== For lists of detected and suppressed errors, rerun with: -s
==392143== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392145== Memcheck, a memory error detector
==392145== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392145== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392145== Command: ../push_swap_working/push_swap 2 3 4 5 1
==392145== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392145== 
==392145== HEAP SUMMARY:
==392145==     in use at exit: 0 bytes in 0 blocks
==392145==   total heap usage: 429 allocs, 429 frees, 4,575 bytes allocated
==392145== 
==392145== All heap blocks were freed -- no leaks are possible
==392145== 
==392145== For lists of detected and suppressed errors, rerun with: -s
==392145== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392147== Memcheck, a memory error detector
==392147== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392147== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392147== Command: ../push_swap_working/push_swap 2 3 5 1 4
==392147== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392147== 
==392147== HEAP SUMMARY:
==392147==     in use at exit: 0 bytes in 0 blocks
==392147==   total heap usage: 429 allocs, 429 frees, 4,574 bytes allocated
==392147== 
==392147== All heap blocks were freed -- no leaks are possible
==392147== 
==392147== For lists of detected and suppressed errors, rerun with: -s
==392147== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392149== Memcheck, a memory error detector
==392149== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392149== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392149== Command: ../push_swap_working/push_swap 2 3 5 4 1
==392149== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392149== 
==392149== HEAP SUMMARY:
==392149==     in use at exit: 0 bytes in 0 blocks
==392149==   total heap usage: 431 allocs, 431 frees, 4,595 bytes allocated
==392149== 
==392149== All heap blocks were freed -- no leaks are possible
==392149== 
==392149== For lists of detected and suppressed errors, rerun with: -s
==392149== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392151== Memcheck, a memory error detector
==392151== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392151== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392151== Command: ../push_swap_working/push_swap 2 4 1 3 5
==392151== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392151== 
==392151== HEAP SUMMARY:
==392151==     in use at exit: 0 bytes in 0 blocks
==392151==   total heap usage: 431 allocs, 431 frees, 4,578 bytes allocated
==392151== 
==392151== All heap blocks were freed -- no leaks are possible
==392151== 
==392151== For lists of detected and suppressed errors, rerun with: -s
==392151== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392154== Memcheck, a memory error detector
==392154== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392154== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392154== Command: ../push_swap_working/push_swap 2 4 1 5 3
==392154== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392154== 
==392154== HEAP SUMMARY:
==392154==     in use at exit: 0 bytes in 0 blocks
==392154==   total heap usage: 435 allocs, 435 frees, 4,618 bytes allocated
==392154== 
==392154== All heap blocks were freed -- no leaks are possible
==392154== 
==392154== For lists of detected and suppressed errors, rerun with: -s
==392154== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392156== Memcheck, a memory error detector
==392156== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392156== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392156== Command: ../push_swap_working/push_swap 2 4 3 1 5
==392156== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392156== 
==392156== HEAP SUMMARY:
==392156==     in use at exit: 0 bytes in 0 blocks
==392156==   total heap usage: 433 allocs, 433 frees, 4,598 bytes allocated
==392156== 
==392156== All heap blocks were freed -- no leaks are possible
==392156== 
==392156== For lists of detected and suppressed errors, rerun with: -s
==392156== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392159== Memcheck, a memory error detector
==392159== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392159== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392159== Command: ../push_swap_working/push_swap 2 4 3 5 1
==392159== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392159== 
==392159== HEAP SUMMARY:
==392159==     in use at exit: 0 bytes in 0 blocks
==392159==   total heap usage: 433 allocs, 433 frees, 4,599 bytes allocated
==392159== 
==392159== All heap blocks were freed -- no leaks are possible
==392159== 
==392159== For lists of detected and suppressed errors, rerun with: -s
==392159== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392161== Memcheck, a memory error detector
==392161== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392161== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392161== Command: ../push_swap_working/push_swap 2 4 5 1 3
==392161== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392161== 
==392161== HEAP SUMMARY:
==392161==     in use at exit: 0 bytes in 0 blocks
==392161==   total heap usage: 433 allocs, 433 frees, 4,598 bytes allocated
==392161== 
==392161== All heap blocks were freed -- no leaks are possible
==392161== 
==392161== For lists of detected and suppressed errors, rerun with: -s
==392161== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392163== Memcheck, a memory error detector
==392163== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392163== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392163== Command: ../push_swap_working/push_swap 2 4 5 3 1
==392163== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392163== 
==392163== HEAP SUMMARY:
==392163==     in use at exit: 0 bytes in 0 blocks
==392163==   total heap usage: 435 allocs, 435 frees, 4,619 bytes allocated
==392163== 
==392163== All heap blocks were freed -- no leaks are possible
==392163== 
==392163== For lists of detected and suppressed errors, rerun with: -s
==392163== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392165== Memcheck, a memory error detector
==392165== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392165== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392165== Command: ../push_swap_working/push_swap 2 5 1 3 4
==392165== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392165== 
==392165== HEAP SUMMARY:
==392165==     in use at exit: 0 bytes in 0 blocks
==392165==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392165== 
==392165== All heap blocks were freed -- no leaks are possible
==392165== 
==392165== For lists of detected and suppressed errors, rerun with: -s
==392165== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392167== Memcheck, a memory error detector
==392167== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392167== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392167== Command: ../push_swap_working/push_swap 2 5 1 4 3
==392167== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392167== 
==392167== HEAP SUMMARY:
==392167==     in use at exit: 0 bytes in 0 blocks
==392167==   total heap usage: 417 allocs, 417 frees, 4,394 bytes allocated
==392167== 
==392167== All heap blocks were freed -- no leaks are possible
==392167== 
==392167== For lists of detected and suppressed errors, rerun with: -s
==392167== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392169== Memcheck, a memory error detector
==392169== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392169== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392169== Command: ../push_swap_working/push_swap 2 5 3 1 4
==392169== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392169== 
==392169== HEAP SUMMARY:
==392169==     in use at exit: 0 bytes in 0 blocks
==392169==   total heap usage: 415 allocs, 415 frees, 4,374 bytes allocated
==392169== 
==392169== All heap blocks were freed -- no leaks are possible
==392169== 
==392169== For lists of detected and suppressed errors, rerun with: -s
==392169== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392172== Memcheck, a memory error detector
==392172== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392172== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392172== Command: ../push_swap_working/push_swap 2 5 3 4 1
==392172== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392172== 
==392172== HEAP SUMMARY:
==392172==     in use at exit: 0 bytes in 0 blocks
==392172==   total heap usage: 415 allocs, 415 frees, 4,375 bytes allocated
==392172== 
==392172== All heap blocks were freed -- no leaks are possible
==392172== 
==392172== For lists of detected and suppressed errors, rerun with: -s
==392172== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392174== Memcheck, a memory error detector
==392174== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392174== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392174== Command: ../push_swap_working/push_swap 2 5 4 1 3
==392174== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392174== 
==392174== HEAP SUMMARY:
==392174==     in use at exit: 0 bytes in 0 blocks
==392174==   total heap usage: 415 allocs, 415 frees, 4,374 bytes allocated
==392174== 
==392174== All heap blocks were freed -- no leaks are possible
==392174== 
==392174== For lists of detected and suppressed errors, rerun with: -s
==392174== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392175== Memcheck, a memory error detector
==392175== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392175== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392175== Command: ../push_swap_working/push_swap 2 5 4 3 1
==392175== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392175== 
==392175== HEAP SUMMARY:
==392175==     in use at exit: 0 bytes in 0 blocks
==392175==   total heap usage: 417 allocs, 417 frees, 4,395 bytes allocated
==392175== 
==392175== All heap blocks were freed -- no leaks are possible
==392175== 
==392175== For lists of detected and suppressed errors, rerun with: -s
==392175== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392178== Memcheck, a memory error detector
==392178== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392178== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392178== Command: ../push_swap_working/push_swap 3 1 2 4 5
==392178== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392178== 
==392178== HEAP SUMMARY:
==392178==     in use at exit: 0 bytes in 0 blocks
==392178==   total heap usage: 409 allocs, 409 frees, 4,314 bytes allocated
==392178== 
==392178== All heap blocks were freed -- no leaks are possible
==392178== 
==392178== For lists of detected and suppressed errors, rerun with: -s
==392178== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392179== Memcheck, a memory error detector
==392179== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392179== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392179== Command: ../push_swap_working/push_swap 3 1 2 5 4
==392179== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392179== 
==392179== HEAP SUMMARY:
==392179==     in use at exit: 0 bytes in 0 blocks
==392179==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392179== 
==392179== All heap blocks were freed -- no leaks are possible
==392179== 
==392179== For lists of detected and suppressed errors, rerun with: -s
==392179== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392181== Memcheck, a memory error detector
==392181== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392181== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392181== Command: ../push_swap_working/push_swap 3 1 4 2 5
==392181== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392181== 
==392181== HEAP SUMMARY:
==392181==     in use at exit: 0 bytes in 0 blocks
==392181==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392181== 
==392181== All heap blocks were freed -- no leaks are possible
==392181== 
==392181== For lists of detected and suppressed errors, rerun with: -s
==392181== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392184== Memcheck, a memory error detector
==392184== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392184== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392184== Command: ../push_swap_working/push_swap 3 1 4 5 2
==392184== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392184== 
==392184== HEAP SUMMARY:
==392184==     in use at exit: 0 bytes in 0 blocks
==392184==   total heap usage: 411 allocs, 411 frees, 4,335 bytes allocated
==392184== 
==392184== All heap blocks were freed -- no leaks are possible
==392184== 
==392184== For lists of detected and suppressed errors, rerun with: -s
==392184== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392186== Memcheck, a memory error detector
==392186== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392186== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392186== Command: ../push_swap_working/push_swap 3 1 5 2 4
==392186== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392186== 
==392186== HEAP SUMMARY:
==392186==     in use at exit: 0 bytes in 0 blocks
==392186==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392186== 
==392186== All heap blocks were freed -- no leaks are possible
==392186== 
==392186== For lists of detected and suppressed errors, rerun with: -s
==392186== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392188== Memcheck, a memory error detector
==392188== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392188== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392188== Command: ../push_swap_working/push_swap 3 1 5 4 2
==392188== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392188== 
==392188== HEAP SUMMARY:
==392188==     in use at exit: 0 bytes in 0 blocks
==392188==   total heap usage: 413 allocs, 413 frees, 4,355 bytes allocated
==392188== 
==392188== All heap blocks were freed -- no leaks are possible
==392188== 
==392188== For lists of detected and suppressed errors, rerun with: -s
==392188== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392190== Memcheck, a memory error detector
==392190== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392190== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392190== Command: ../push_swap_working/push_swap 3 2 1 4 5
==392190== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392190== 
==392190== HEAP SUMMARY:
==392190==     in use at exit: 0 bytes in 0 blocks
==392190==   total heap usage: 425 allocs, 425 frees, 4,534 bytes allocated
==392190== 
==392190== All heap blocks were freed -- no leaks are possible
==392190== 
==392190== For lists of detected and suppressed errors, rerun with: -s
==392190== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392192== Memcheck, a memory error detector
==392192== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392192== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392192== Command: ../push_swap_working/push_swap 3 2 1 5 4
==392192== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392192== 
==392192== HEAP SUMMARY:
==392192==     in use at exit: 0 bytes in 0 blocks
==392192==   total heap usage: 429 allocs, 429 frees, 4,574 bytes allocated
==392192== 
==392192== All heap blocks were freed -- no leaks are possible
==392192== 
==392192== For lists of detected and suppressed errors, rerun with: -s
==392192== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392194== Memcheck, a memory error detector
==392194== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392194== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392194== Command: ../push_swap_working/push_swap 3 2 4 1 5
==392194== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392194== 
==392194== HEAP SUMMARY:
==392194==     in use at exit: 0 bytes in 0 blocks
==392194==   total heap usage: 427 allocs, 427 frees, 4,554 bytes allocated
==392194== 
==392194== All heap blocks were freed -- no leaks are possible
==392194== 
==392194== For lists of detected and suppressed errors, rerun with: -s
==392194== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392197== Memcheck, a memory error detector
==392197== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392197== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392197== Command: ../push_swap_working/push_swap 3 2 4 5 1
==392197== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392197== 
==392197== HEAP SUMMARY:
==392197==     in use at exit: 0 bytes in 0 blocks
==392197==   total heap usage: 427 allocs, 427 frees, 4,555 bytes allocated
==392197== 
==392197== All heap blocks were freed -- no leaks are possible
==392197== 
==392197== For lists of detected and suppressed errors, rerun with: -s
==392197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392213== Memcheck, a memory error detector
==392213== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392213== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392213== Command: ../push_swap_working/push_swap 3 2 5 1 4
==392213== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392213== 
==392213== HEAP SUMMARY:
==392213==     in use at exit: 0 bytes in 0 blocks
==392213==   total heap usage: 427 allocs, 427 frees, 4,554 bytes allocated
==392213== 
==392213== All heap blocks were freed -- no leaks are possible
==392213== 
==392213== For lists of detected and suppressed errors, rerun with: -s
==392213== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392215== Memcheck, a memory error detector
==392215== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392215== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392215== Command: ../push_swap_working/push_swap 3 2 5 4 1
==392215== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 4=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 3=
=Biggest in B 3=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 4=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=Biggest in B 3=
=Smallest in B 3=
=------------------=
dest_len is 4
src belongs in place 2
The most efficient way is ra 2 times
Cost return was 2
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 2=
=    2 | 1=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 2 1 4 5 
==392215== 
==392215== HEAP SUMMARY:
==392215==     in use at exit: 0 bytes in 0 blocks
==392215==   total heap usage: 429 allocs, 429 frees, 4,575 bytes allocated
==392215== 
==392215== All heap blocks were freed -- no leaks are possible
==392215== 
==392215== For lists of detected and suppressed errors, rerun with: -s
==392215== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392217== Memcheck, a memory error detector
==392217== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392217== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392217== Command: ../push_swap_working/push_swap 3 4 1 2 5
==392217== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392217== 
==392217== HEAP SUMMARY:
==392217==     in use at exit: 0 bytes in 0 blocks
==392217==   total heap usage: 435 allocs, 435 frees, 4,602 bytes allocated
==392217== 
==392217== All heap blocks were freed -- no leaks are possible
==392217== 
==392217== For lists of detected and suppressed errors, rerun with: -s
==392217== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392219== Memcheck, a memory error detector
==392219== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392219== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392219== Command: ../push_swap_working/push_swap 3 4 1 5 2
==392219== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392219== 
==392219== HEAP SUMMARY:
==392219==     in use at exit: 0 bytes in 0 blocks
==392219==   total heap usage: 439 allocs, 439 frees, 4,642 bytes allocated
==392219== 
==392219== All heap blocks were freed -- no leaks are possible
==392219== 
==392219== For lists of detected and suppressed errors, rerun with: -s
==392219== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392221== Memcheck, a memory error detector
==392221== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392221== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392221== Command: ../push_swap_working/push_swap 3 4 2 1 5
==392221== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392221== 
==392221== HEAP SUMMARY:
==392221==     in use at exit: 0 bytes in 0 blocks
==392221==   total heap usage: 437 allocs, 437 frees, 4,622 bytes allocated
==392221== 
==392221== All heap blocks were freed -- no leaks are possible
==392221== 
==392221== For lists of detected and suppressed errors, rerun with: -s
==392221== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392223== Memcheck, a memory error detector
==392223== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392223== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392223== Command: ../push_swap_working/push_swap 3 4 2 5 1
==392223== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392223== 
==392223== HEAP SUMMARY:
==392223==     in use at exit: 0 bytes in 0 blocks
==392223==   total heap usage: 437 allocs, 437 frees, 4,623 bytes allocated
==392223== 
==392223== All heap blocks were freed -- no leaks are possible
==392223== 
==392223== For lists of detected and suppressed errors, rerun with: -s
==392223== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392225== Memcheck, a memory error detector
==392225== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392225== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392225== Command: ../push_swap_working/push_swap 3 4 5 1 2
==392225== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392225== 
==392225== HEAP SUMMARY:
==392225==     in use at exit: 0 bytes in 0 blocks
==392225==   total heap usage: 437 allocs, 437 frees, 4,622 bytes allocated
==392225== 
==392225== All heap blocks were freed -- no leaks are possible
==392225== 
==392225== For lists of detected and suppressed errors, rerun with: -s
==392225== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392227== Memcheck, a memory error detector
==392227== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392227== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392227== Command: ../push_swap_working/push_swap 3 4 5 2 1
==392227== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392227== 
==392227== HEAP SUMMARY:
==392227==     in use at exit: 0 bytes in 0 blocks
==392227==   total heap usage: 439 allocs, 439 frees, 4,643 bytes allocated
==392227== 
==392227== All heap blocks were freed -- no leaks are possible
==392227== 
==392227== For lists of detected and suppressed errors, rerun with: -s
==392227== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392230== Memcheck, a memory error detector
==392230== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392230== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392230== Command: ../push_swap_working/push_swap 3 5 1 2 4
==392230== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392230== 
==392230== HEAP SUMMARY:
==392230==     in use at exit: 0 bytes in 0 blocks
==392230==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392230== 
==392230== All heap blocks were freed -- no leaks are possible
==392230== 
==392230== For lists of detected and suppressed errors, rerun with: -s
==392230== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392231== Memcheck, a memory error detector
==392231== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392231== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392231== Command: ../push_swap_working/push_swap 3 5 1 4 2
==392231== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392231== 
==392231== HEAP SUMMARY:
==392231==     in use at exit: 0 bytes in 0 blocks
==392231==   total heap usage: 421 allocs, 421 frees, 4,418 bytes allocated
==392231== 
==392231== All heap blocks were freed -- no leaks are possible
==392231== 
==392231== For lists of detected and suppressed errors, rerun with: -s
==392231== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392233== Memcheck, a memory error detector
==392233== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392233== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392233== Command: ../push_swap_working/push_swap 3 5 2 1 4
==392233== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392233== 
==392233== HEAP SUMMARY:
==392233==     in use at exit: 0 bytes in 0 blocks
==392233==   total heap usage: 419 allocs, 419 frees, 4,398 bytes allocated
==392233== 
==392233== All heap blocks were freed -- no leaks are possible
==392233== 
==392233== For lists of detected and suppressed errors, rerun with: -s
==392233== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392235== Memcheck, a memory error detector
==392235== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392235== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392235== Command: ../push_swap_working/push_swap 3 5 2 4 1
==392235== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392235== 
==392235== HEAP SUMMARY:
==392235==     in use at exit: 0 bytes in 0 blocks
==392235==   total heap usage: 419 allocs, 419 frees, 4,399 bytes allocated
==392235== 
==392235== All heap blocks were freed -- no leaks are possible
==392235== 
==392235== For lists of detected and suppressed errors, rerun with: -s
==392235== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392237== Memcheck, a memory error detector
==392237== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392237== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392237== Command: ../push_swap_working/push_swap 3 5 4 1 2
==392237== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392237== 
==392237== HEAP SUMMARY:
==392237==     in use at exit: 0 bytes in 0 blocks
==392237==   total heap usage: 419 allocs, 419 frees, 4,398 bytes allocated
==392237== 
==392237== All heap blocks were freed -- no leaks are possible
==392237== 
==392237== For lists of detected and suppressed errors, rerun with: -s
==392237== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392241== Memcheck, a memory error detector
==392241== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392241== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392241== Command: ../push_swap_working/push_swap 3 5 4 2 1
==392241== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392241== 
==392241== HEAP SUMMARY:
==392241==     in use at exit: 0 bytes in 0 blocks
==392241==   total heap usage: 421 allocs, 421 frees, 4,419 bytes allocated
==392241== 
==392241== All heap blocks were freed -- no leaks are possible
==392241== 
==392241== For lists of detected and suppressed errors, rerun with: -s
==392241== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392243== Memcheck, a memory error detector
==392243== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392243== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392243== Command: ../push_swap_working/push_swap 4 1 2 3 5
==392243== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392243== 
==392243== HEAP SUMMARY:
==392243==     in use at exit: 0 bytes in 0 blocks
==392243==   total heap usage: 413 allocs, 413 frees, 4,338 bytes allocated
==392243== 
==392243== All heap blocks were freed -- no leaks are possible
==392243== 
==392243== For lists of detected and suppressed errors, rerun with: -s
==392243== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392245== Memcheck, a memory error detector
==392245== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392245== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392245== Command: ../push_swap_working/push_swap 4 1 2 5 3
==392245== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392245== 
==392245== HEAP SUMMARY:
==392245==     in use at exit: 0 bytes in 0 blocks
==392245==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392245== 
==392245== All heap blocks were freed -- no leaks are possible
==392245== 
==392245== For lists of detected and suppressed errors, rerun with: -s
==392245== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392247== Memcheck, a memory error detector
==392247== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392247== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392247== Command: ../push_swap_working/push_swap 4 1 3 2 5
==392247== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392247== 
==392247== HEAP SUMMARY:
==392247==     in use at exit: 0 bytes in 0 blocks
==392247==   total heap usage: 415 allocs, 415 frees, 4,358 bytes allocated
==392247== 
==392247== All heap blocks were freed -- no leaks are possible
==392247== 
==392247== For lists of detected and suppressed errors, rerun with: -s
==392247== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392250== Memcheck, a memory error detector
==392250== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392250== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392250== Command: ../push_swap_working/push_swap 4 1 3 5 2
==392250== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392250== 
==392250== HEAP SUMMARY:
==392250==     in use at exit: 0 bytes in 0 blocks
==392250==   total heap usage: 415 allocs, 415 frees, 4,359 bytes allocated
==392250== 
==392250== All heap blocks were freed -- no leaks are possible
==392250== 
==392250== For lists of detected and suppressed errors, rerun with: -s
==392250== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392251== Memcheck, a memory error detector
==392251== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392251== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392251== Command: ../push_swap_working/push_swap 4 1 5 2 3
==392251== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392251== 
==392251== HEAP SUMMARY:
==392251==     in use at exit: 0 bytes in 0 blocks
==392251==   total heap usage: 415 allocs, 415 frees, 4,358 bytes allocated
==392251== 
==392251== All heap blocks were freed -- no leaks are possible
==392251== 
==392251== For lists of detected and suppressed errors, rerun with: -s
==392251== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392253== Memcheck, a memory error detector
==392253== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392253== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392253== Command: ../push_swap_working/push_swap 4 1 5 3 2
==392253== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 1=
=    2 | 2=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 1 2 3 5 
==392253== 
==392253== HEAP SUMMARY:
==392253==     in use at exit: 0 bytes in 0 blocks
==392253==   total heap usage: 417 allocs, 417 frees, 4,379 bytes allocated
==392253== 
==392253== All heap blocks were freed -- no leaks are possible
==392253== 
==392253== For lists of detected and suppressed errors, rerun with: -s
==392253== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392255== Memcheck, a memory error detector
==392255== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392255== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392255== Command: ../push_swap_working/push_swap 4 2 1 3 5
==392255== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392255== 
==392255== HEAP SUMMARY:
==392255==     in use at exit: 0 bytes in 0 blocks
==392255==   total heap usage: 429 allocs, 429 frees, 4,558 bytes allocated
==392255== 
==392255== All heap blocks were freed -- no leaks are possible
==392255== 
==392255== For lists of detected and suppressed errors, rerun with: -s
==392255== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392257== Memcheck, a memory error detector
==392257== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392257== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392257== Command: ../push_swap_working/push_swap 4 2 1 5 3
==392257== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392257== 
==392257== HEAP SUMMARY:
==392257==     in use at exit: 0 bytes in 0 blocks
==392257==   total heap usage: 433 allocs, 433 frees, 4,598 bytes allocated
==392257== 
==392257== All heap blocks were freed -- no leaks are possible
==392257== 
==392257== For lists of detected and suppressed errors, rerun with: -s
==392257== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392259== Memcheck, a memory error detector
==392259== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392259== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392259== Command: ../push_swap_working/push_swap 4 2 3 1 5
==392259== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392259== 
==392259== HEAP SUMMARY:
==392259==     in use at exit: 0 bytes in 0 blocks
==392259==   total heap usage: 431 allocs, 431 frees, 4,578 bytes allocated
==392259== 
==392259== All heap blocks were freed -- no leaks are possible
==392259== 
==392259== For lists of detected and suppressed errors, rerun with: -s
==392259== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392261== Memcheck, a memory error detector
==392261== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392261== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392261== Command: ../push_swap_working/push_swap 4 2 3 5 1
==392261== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392261== 
==392261== HEAP SUMMARY:
==392261==     in use at exit: 0 bytes in 0 blocks
==392261==   total heap usage: 431 allocs, 431 frees, 4,579 bytes allocated
==392261== 
==392261== All heap blocks were freed -- no leaks are possible
==392261== 
==392261== For lists of detected and suppressed errors, rerun with: -s
==392261== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392263== Memcheck, a memory error detector
==392263== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392263== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392263== Command: ../push_swap_working/push_swap 4 2 5 1 3
==392263== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392263== 
==392263== HEAP SUMMARY:
==392263==     in use at exit: 0 bytes in 0 blocks
==392263==   total heap usage: 431 allocs, 431 frees, 4,578 bytes allocated
==392263== 
==392263== All heap blocks were freed -- no leaks are possible
==392263== 
==392263== For lists of detected and suppressed errors, rerun with: -s
==392263== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392265== Memcheck, a memory error detector
==392265== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392265== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392265== Command: ../push_swap_working/push_swap 4 2 5 3 1
==392265== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 2=
=    2 | 1=
=    3 | 3=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 2 1 3 5 
==392265== 
==392265== HEAP SUMMARY:
==392265==     in use at exit: 0 bytes in 0 blocks
==392265==   total heap usage: 433 allocs, 433 frees, 4,599 bytes allocated
==392265== 
==392265== All heap blocks were freed -- no leaks are possible
==392265== 
==392265== For lists of detected and suppressed errors, rerun with: -s
==392265== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392267== Memcheck, a memory error detector
==392267== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392267== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392267== Command: ../push_swap_working/push_swap 4 3 1 2 5
==392267== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392267== 
==392267== HEAP SUMMARY:
==392267==     in use at exit: 0 bytes in 0 blocks
==392267==   total heap usage: 433 allocs, 433 frees, 4,582 bytes allocated
==392267== 
==392267== All heap blocks were freed -- no leaks are possible
==392267== 
==392267== For lists of detected and suppressed errors, rerun with: -s
==392267== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392270== Memcheck, a memory error detector
==392270== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392270== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392270== Command: ../push_swap_working/push_swap 4 3 1 5 2
==392270== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392270== 
==392270== HEAP SUMMARY:
==392270==     in use at exit: 0 bytes in 0 blocks
==392270==   total heap usage: 437 allocs, 437 frees, 4,622 bytes allocated
==392270== 
==392270== All heap blocks were freed -- no leaks are possible
==392270== 
==392270== For lists of detected and suppressed errors, rerun with: -s
==392270== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392272== Memcheck, a memory error detector
==392272== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392272== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392272== Command: ../push_swap_working/push_swap 4 3 2 1 5
==392272== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392272== 
==392272== HEAP SUMMARY:
==392272==     in use at exit: 0 bytes in 0 blocks
==392272==   total heap usage: 435 allocs, 435 frees, 4,602 bytes allocated
==392272== 
==392272== All heap blocks were freed -- no leaks are possible
==392272== 
==392272== For lists of detected and suppressed errors, rerun with: -s
==392272== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392274== Memcheck, a memory error detector
==392274== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392274== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392274== Command: ../push_swap_working/push_swap 4 3 2 5 1
==392274== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392274== 
==392274== HEAP SUMMARY:
==392274==     in use at exit: 0 bytes in 0 blocks
==392274==   total heap usage: 435 allocs, 435 frees, 4,603 bytes allocated
==392274== 
==392274== All heap blocks were freed -- no leaks are possible
==392274== 
==392274== For lists of detected and suppressed errors, rerun with: -s
==392274== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392276== Memcheck, a memory error detector
==392276== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392276== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392276== Command: ../push_swap_working/push_swap 4 3 5 1 2
==392276== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392276== 
==392276== HEAP SUMMARY:
==392276==     in use at exit: 0 bytes in 0 blocks
==392276==   total heap usage: 435 allocs, 435 frees, 4,602 bytes allocated
==392276== 
==392276== All heap blocks were freed -- no leaks are possible
==392276== 
==392276== For lists of detected and suppressed errors, rerun with: -s
==392276== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392278== Memcheck, a memory error detector
==392278== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392278== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392278== Command: ../push_swap_working/push_swap 4 3 5 2 1
==392278== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 4=
=Biggest in B 4=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=Biggest in B 4=
=Smallest in B 4=
=------------------=
dest_len is 4
src belongs in place 3
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 4=
=    1 | 3=
=    2 | 1=
=    3 | 2=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
4 3 1 2 5 
==392278== 
==392278== HEAP SUMMARY:
==392278==     in use at exit: 0 bytes in 0 blocks
==392278==   total heap usage: 437 allocs, 437 frees, 4,623 bytes allocated
==392278== 
==392278== All heap blocks were freed -- no leaks are possible
==392278== 
==392278== For lists of detected and suppressed errors, rerun with: -s
==392278== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392280== Memcheck, a memory error detector
==392280== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392280== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392280== Command: ../push_swap_working/push_swap 4 5 1 2 3
==392280== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392280== 
==392280== HEAP SUMMARY:
==392280==     in use at exit: 0 bytes in 0 blocks
==392280==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392280== 
==392280== All heap blocks were freed -- no leaks are possible
==392280== 
==392280== For lists of detected and suppressed errors, rerun with: -s
==392280== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392283== Memcheck, a memory error detector
==392283== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392283== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392283== Command: ../push_swap_working/push_swap 4 5 1 3 2
==392283== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392283== 
==392283== HEAP SUMMARY:
==392283==     in use at exit: 0 bytes in 0 blocks
==392283==   total heap usage: 403 allocs, 403 frees, 4,194 bytes allocated
==392283== 
==392283== All heap blocks were freed -- no leaks are possible
==392283== 
==392283== For lists of detected and suppressed errors, rerun with: -s
==392283== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392285== Memcheck, a memory error detector
==392285== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392285== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392285== Command: ../push_swap_working/push_swap 4 5 2 1 3
==392285== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392285== 
==392285== HEAP SUMMARY:
==392285==     in use at exit: 0 bytes in 0 blocks
==392285==   total heap usage: 401 allocs, 401 frees, 4,174 bytes allocated
==392285== 
==392285== All heap blocks were freed -- no leaks are possible
==392285== 
==392285== For lists of detected and suppressed errors, rerun with: -s
==392285== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392287== Memcheck, a memory error detector
==392287== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392287== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392287== Command: ../push_swap_working/push_swap 4 5 2 3 1
==392287== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392287== 
==392287== HEAP SUMMARY:
==392287==     in use at exit: 0 bytes in 0 blocks
==392287==   total heap usage: 401 allocs, 401 frees, 4,175 bytes allocated
==392287== 
==392287== All heap blocks were freed -- no leaks are possible
==392287== 
==392287== For lists of detected and suppressed errors, rerun with: -s
==392287== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392289== Memcheck, a memory error detector
==392289== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392289== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392289== Command: ../push_swap_working/push_swap 4 5 3 1 2
==392289== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392289== 
==392289== HEAP SUMMARY:
==392289==     in use at exit: 0 bytes in 0 blocks
==392289==   total heap usage: 401 allocs, 401 frees, 4,174 bytes allocated
==392289== 
==392289== All heap blocks were freed -- no leaks are possible
==392289== 
==392289== For lists of detected and suppressed errors, rerun with: -s
==392289== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392291== Memcheck, a memory error detector
==392291== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392291== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392291== Command: ../push_swap_working/push_swap 4 5 3 2 1
==392291== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392291== 
==392291== HEAP SUMMARY:
==392291==     in use at exit: 0 bytes in 0 blocks
==392291==   total heap usage: 403 allocs, 403 frees, 4,195 bytes allocated
==392291== 
==392291== All heap blocks were freed -- no leaks are possible
==392291== 
==392291== For lists of detected and suppressed errors, rerun with: -s
==392291== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392293== Memcheck, a memory error detector
==392293== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392293== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392293== Command: ../push_swap_working/push_swap 5 1 2 3 4
==392293== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392293== 
==392293== HEAP SUMMARY:
==392293==     in use at exit: 0 bytes in 0 blocks
==392293==   total heap usage: 395 allocs, 395 frees, 4,114 bytes allocated
==392293== 
==392293== All heap blocks were freed -- no leaks are possible
==392293== 
==392293== For lists of detected and suppressed errors, rerun with: -s
==392293== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392295== Memcheck, a memory error detector
==392295== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392295== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392295== Command: ../push_swap_working/push_swap 5 1 2 4 3
==392295== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392295== 
==392295== HEAP SUMMARY:
==392295==     in use at exit: 0 bytes in 0 blocks
==392295==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392295== 
==392295== All heap blocks were freed -- no leaks are possible
==392295== 
==392295== For lists of detected and suppressed errors, rerun with: -s
==392295== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392297== Memcheck, a memory error detector
==392297== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392297== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392297== Command: ../push_swap_working/push_swap 5 1 3 2 4
==392297== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392297== 
==392297== HEAP SUMMARY:
==392297==     in use at exit: 0 bytes in 0 blocks
==392297==   total heap usage: 397 allocs, 397 frees, 4,134 bytes allocated
==392297== 
==392297== All heap blocks were freed -- no leaks are possible
==392297== 
==392297== For lists of detected and suppressed errors, rerun with: -s
==392297== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392299== Memcheck, a memory error detector
==392299== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392299== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392299== Command: ../push_swap_working/push_swap 5 1 3 4 2
==392299== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392299== 
==392299== HEAP SUMMARY:
==392299==     in use at exit: 0 bytes in 0 blocks
==392299==   total heap usage: 397 allocs, 397 frees, 4,135 bytes allocated
==392299== 
==392299== All heap blocks were freed -- no leaks are possible
==392299== 
==392299== For lists of detected and suppressed errors, rerun with: -s
==392299== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392301== Memcheck, a memory error detector
==392301== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392301== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392301== Command: ../push_swap_working/push_swap 5 1 4 2 3
==392301== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392301== 
==392301== HEAP SUMMARY:
==392301==     in use at exit: 0 bytes in 0 blocks
==392301==   total heap usage: 397 allocs, 397 frees, 4,134 bytes allocated
==392301== 
==392301== All heap blocks were freed -- no leaks are possible
==392301== 
==392301== For lists of detected and suppressed errors, rerun with: -s
==392301== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392304== Memcheck, a memory error detector
==392304== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392304== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392304== Command: ../push_swap_working/push_swap 5 1 4 3 2
==392304== 
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 2=
=List B=
=Index | Value=
=    0 | 1=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 1=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392304== 
==392304== HEAP SUMMARY:
==392304==     in use at exit: 0 bytes in 0 blocks
==392304==   total heap usage: 399 allocs, 399 frees, 4,155 bytes allocated
==392304== 
==392304== All heap blocks were freed -- no leaks are possible
==392304== 
==392304== For lists of detected and suppressed errors, rerun with: -s
==392304== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392307== Memcheck, a memory error detector
==392307== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392307== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392307== Command: ../push_swap_working/push_swap 5 2 1 3 4
==392307== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392307== 
==392307== HEAP SUMMARY:
==392307==     in use at exit: 0 bytes in 0 blocks
==392307==   total heap usage: 411 allocs, 411 frees, 4,334 bytes allocated
==392307== 
==392307== All heap blocks were freed -- no leaks are possible
==392307== 
==392307== For lists of detected and suppressed errors, rerun with: -s
==392307== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392308== Memcheck, a memory error detector
==392308== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392308== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392308== Command: ../push_swap_working/push_swap 5 2 1 4 3
==392308== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392308== 
==392308== HEAP SUMMARY:
==392308==     in use at exit: 0 bytes in 0 blocks
==392308==   total heap usage: 415 allocs, 415 frees, 4,374 bytes allocated
==392308== 
==392308== All heap blocks were freed -- no leaks are possible
==392308== 
==392308== For lists of detected and suppressed errors, rerun with: -s
==392308== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392311== Memcheck, a memory error detector
==392311== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392311== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392311== Command: ../push_swap_working/push_swap 5 2 3 1 4
==392311== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392311== 
==392311== HEAP SUMMARY:
==392311==     in use at exit: 0 bytes in 0 blocks
==392311==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392311== 
==392311== All heap blocks were freed -- no leaks are possible
==392311== 
==392311== For lists of detected and suppressed errors, rerun with: -s
==392311== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392313== Memcheck, a memory error detector
==392313== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392313== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392313== Command: ../push_swap_working/push_swap 5 2 3 4 1
==392313== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392313== 
==392313== HEAP SUMMARY:
==392313==     in use at exit: 0 bytes in 0 blocks
==392313==   total heap usage: 413 allocs, 413 frees, 4,355 bytes allocated
==392313== 
==392313== All heap blocks were freed -- no leaks are possible
==392313== 
==392313== For lists of detected and suppressed errors, rerun with: -s
==392313== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392315== Memcheck, a memory error detector
==392315== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392315== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392315== Command: ../push_swap_working/push_swap 5 2 4 1 3
==392315== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392315== 
==392315== HEAP SUMMARY:
==392315==     in use at exit: 0 bytes in 0 blocks
==392315==   total heap usage: 413 allocs, 413 frees, 4,354 bytes allocated
==392315== 
==392315== All heap blocks were freed -- no leaks are possible
==392315== 
==392315== For lists of detected and suppressed errors, rerun with: -s
==392315== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392318== Memcheck, a memory error detector
==392318== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392318== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392318== Command: ../push_swap_working/push_swap 5 2 4 3 1
==392318== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 3=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 2=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 2=
=------------------=
dest_len is 3
src belongs in place 1
The most efficient way is ra 1 times
Cost return was 1
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 2=
=    1 | 1=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
2 1 3 4 5 
==392318== 
==392318== HEAP SUMMARY:
==392318==     in use at exit: 0 bytes in 0 blocks
==392318==   total heap usage: 415 allocs, 415 frees, 4,375 bytes allocated
==392318== 
==392318== All heap blocks were freed -- no leaks are possible
==392318== 
==392318== For lists of detected and suppressed errors, rerun with: -s
==392318== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392319== Memcheck, a memory error detector
==392319== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392319== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392319== Command: ../push_swap_working/push_swap 5 3 1 2 4
==392319== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392319== 
==392319== HEAP SUMMARY:
==392319==     in use at exit: 0 bytes in 0 blocks
==392319==   total heap usage: 415 allocs, 415 frees, 4,358 bytes allocated
==392319== 
==392319== All heap blocks were freed -- no leaks are possible
==392319== 
==392319== For lists of detected and suppressed errors, rerun with: -s
==392319== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392321== Memcheck, a memory error detector
==392321== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392321== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392321== Command: ../push_swap_working/push_swap 5 3 1 4 2
==392321== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392321== 
==392321== HEAP SUMMARY:
==392321==     in use at exit: 0 bytes in 0 blocks
==392321==   total heap usage: 419 allocs, 419 frees, 4,398 bytes allocated
==392321== 
==392321== All heap blocks were freed -- no leaks are possible
==392321== 
==392321== For lists of detected and suppressed errors, rerun with: -s
==392321== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392324== Memcheck, a memory error detector
==392324== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392324== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392324== Command: ../push_swap_working/push_swap 5 3 2 1 4
==392324== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392324== 
==392324== HEAP SUMMARY:
==392324==     in use at exit: 0 bytes in 0 blocks
==392324==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392324== 
==392324== All heap blocks were freed -- no leaks are possible
==392324== 
==392324== For lists of detected and suppressed errors, rerun with: -s
==392324== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392326== Memcheck, a memory error detector
==392326== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392326== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392326== Command: ../push_swap_working/push_swap 5 3 2 4 1
==392326== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392326== 
==392326== HEAP SUMMARY:
==392326==     in use at exit: 0 bytes in 0 blocks
==392326==   total heap usage: 417 allocs, 417 frees, 4,379 bytes allocated
==392326== 
==392326== All heap blocks were freed -- no leaks are possible
==392326== 
==392326== For lists of detected and suppressed errors, rerun with: -s
==392326== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392328== Memcheck, a memory error detector
==392328== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392328== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392328== Command: ../push_swap_working/push_swap 5 3 4 1 2
==392328== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392328== 
==392328== HEAP SUMMARY:
==392328==     in use at exit: 0 bytes in 0 blocks
==392328==   total heap usage: 417 allocs, 417 frees, 4,378 bytes allocated
==392328== 
==392328== All heap blocks were freed -- no leaks are possible
==392328== 
==392328== For lists of detected and suppressed errors, rerun with: -s
==392328== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392329== Memcheck, a memory error detector
==392329== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392329== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392329== Command: ../push_swap_working/push_swap 5 3 4 2 1
==392329== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 3=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 3=
=------------------=
dest_len is 3
src belongs in place 2
The most efficient way is rra -1 times
Cost return was -1
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 3=
=    1 | 1=
=    2 | 2=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
3 1 2 4 5 
==392329== 
==392329== HEAP SUMMARY:
==392329==     in use at exit: 0 bytes in 0 blocks
==392329==   total heap usage: 419 allocs, 419 frees, 4,399 bytes allocated
==392329== 
==392329== All heap blocks were freed -- no leaks are possible
==392329== 
==392329== For lists of detected and suppressed errors, rerun with: -s
==392329== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392332== Memcheck, a memory error detector
==392332== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392332== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392332== Command: ../push_swap_working/push_swap 5 4 1 2 3
==392332== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392332== 
==392332== HEAP SUMMARY:
==392332==     in use at exit: 0 bytes in 0 blocks
==392332==   total heap usage: 397 allocs, 397 frees, 4,134 bytes allocated
==392332== 
==392332== All heap blocks were freed -- no leaks are possible
==392332== 
==392332== For lists of detected and suppressed errors, rerun with: -s
==392332== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392334== Memcheck, a memory error detector
==392334== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392334== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392334== Command: ../push_swap_working/push_swap 5 4 1 3 2
==392334== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392334== 
==392334== HEAP SUMMARY:
==392334==     in use at exit: 0 bytes in 0 blocks
==392334==   total heap usage: 401 allocs, 401 frees, 4,174 bytes allocated
==392334== 
==392334== All heap blocks were freed -- no leaks are possible
==392334== 
==392334== For lists of detected and suppressed errors, rerun with: -s
==392334== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392337== Memcheck, a memory error detector
==392337== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392337== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392337== Command: ../push_swap_working/push_swap 5 4 2 1 3
==392337== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392337== 
==392337== HEAP SUMMARY:
==392337==     in use at exit: 0 bytes in 0 blocks
==392337==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392337== 
==392337== All heap blocks were freed -- no leaks are possible
==392337== 
==392337== For lists of detected and suppressed errors, rerun with: -s
==392337== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392339== Memcheck, a memory error detector
==392339== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392339== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392339== Command: ../push_swap_working/push_swap 5 4 2 3 1
==392339== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392339== 
==392339== HEAP SUMMARY:
==392339==     in use at exit: 0 bytes in 0 blocks
==392339==   total heap usage: 399 allocs, 399 frees, 4,155 bytes allocated
==392339== 
==392339== All heap blocks were freed -- no leaks are possible
==392339== 
==392339== For lists of detected and suppressed errors, rerun with: -s
==392339== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392341== Memcheck, a memory error detector
==392341== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392341== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392341== Command: ../push_swap_working/push_swap 5 4 3 1 2
==392341== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392341== 
==392341== HEAP SUMMARY:
==392341==     in use at exit: 0 bytes in 0 blocks
==392341==   total heap usage: 399 allocs, 399 frees, 4,154 bytes allocated
==392341== 
==392341== All heap blocks were freed -- no leaks are possible
==392341== 
==392341== For lists of detected and suppressed errors, rerun with: -s
==392341== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==392343== Memcheck, a memory error detector
==392343== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==392343== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==392343== Command: ../push_swap_working/push_swap 5 4 3 2 1
==392343== 
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=Biggest in A 3=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 4=
=    1 | 5=
=Biggest in B 5=
=Smallest in B 4=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=Biggest in A 4=
=Smallest in A 1=
=List B=
=Index | Value=
=    0 | 5=
=Biggest in B 5=
=Smallest in B 5=
=------------------=
=------------------=
=List A=
=Index | Value=
=    0 | 1=
=    1 | 2=
=    2 | 3=
=    3 | 4=
=    4 | 5=
=Biggest in A 5=
=Smallest in A 1=
=List B=
=Index | Value=
=Biggest in B 0=
=Smallest in B 0=
=------------------=
1 2 3 4 5 
==392343== 
==392343== HEAP SUMMARY:
==392343==     in use at exit: 0 bytes in 0 blocks
==392343==   total heap usage: 401 allocs, 401 frees, 4,175 bytes allocated
==392343== 
==392343== All heap blocks were freed -- no leaks are possible
==392343== 
==392343== For lists of detected and suppressed errors, rerun with: -s
==392343== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
